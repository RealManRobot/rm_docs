import{_ as a,c as s,o as n,a3 as r}from"./chunks/framework.DpFyhY0e.js";const e="/assets/rm_control1.CwBqv8ob.png",l="/assets/rm_control2.sCJjSYV-.png",v=JSON.parse('{"title":"rm_control使用说明","description":"","frontmatter":{},"headers":[],"relativePath":"robot/ros2/control.md","filePath":"robot/ros2/control.md","lastUpdated":1722230700000}'),t={name:"robot/ros2/control.md"},o=r('<h1 id="rm-control使用说明" tabindex="-1">rm_control使用说明 <a class="header-anchor" href="#rm-control使用说明" aria-label="Permalink to &quot;rm_control使用说明&quot;">​</a></h1><h2 id="rm-control功能包说明" tabindex="-1">rm_control功能包说明 <a class="header-anchor" href="#rm-control功能包说明" aria-label="Permalink to &quot;rm_control功能包说明&quot;">​</a></h2><p>rm_control功能包为实现moveit2控制真实机械臂时所必须的一个功能包，该功能包的主要作用为将moveit2规划好的路径点进行进一步的细分，将细分后的路径点以透传的方式给到rm_driver，实现机械臂的规划运行。</p><ul><li>1.功能包使用。</li><li>2.功能包架构说明。</li><li>3.功能包话题说明。<br> 通过这三部分内容的介绍可以帮助大家：</li><li>1.了解该功能包的使用。</li><li>2.熟悉功能包中的文件构成及作用。</li><li>3.熟悉功能包相关的话题，方便开发和使用</li></ul><h2 id="rm-control功能包使用" tabindex="-1">rm_control功能包使用 <a class="header-anchor" href="#rm-control功能包使用" aria-label="Permalink to &quot;rm_control功能包使用&quot;">​</a></h2><h3 id="功能包基础使用" tabindex="-1">功能包基础使用 <a class="header-anchor" href="#功能包基础使用" aria-label="Permalink to &quot;功能包基础使用&quot;">​</a></h3><p>首先配置好环境完成连接后我们可以通过以下命令直接启动节点，运行rm_control功能包。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 launch  rm_control rm_&lt;arm_type&gt;_control.launch.py</span></span></code></pre></div><p>在实际使用时需要将以上的&lt;arm_type&gt;更换为实际的机械臂型号，可选择的机械臂型号有65、63、eco65、75。 例如65机械臂的启动命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 launch  rm_control rm_65_control.launch.py</span></span></code></pre></div><p>节点启动成功后，将显示以下画面。 <img src="'+e+'" alt="image"> 在单独启动该功能包的节点时并不发挥作用，需要结合rm_driver功能包和moveit2的相关节点一起使用才能发挥作用，详细请查看《rm_moveit2_config详解》相关内容。</p><h3 id="功能包进阶使用" tabindex="-1">功能包进阶使用 <a class="header-anchor" href="#功能包进阶使用" aria-label="Permalink to &quot;功能包进阶使用&quot;">​</a></h3><p>在rm_control功能包中也有一些参数可以进行配置，由于参数并不是很多，这边将参数直接在launch文件中进行了配置。 <img src="'+l+`" alt="image"> 如上图所示第一个红框框出的位置为文件的路径，第二个框出的位置为当前可配置的参数。<br> 参数follow：代表当前透传使用的跟随模式，true:高跟随，false:低跟随。高跟随即机械臂运动方式与透传完全一致，需要根据透传的速率和机械臂的速度、加速度参数进行较详细的计算，使用门槛较高，但控制精细。低跟随即机械臂会基本根据透传速率和速度、加速度向透传点运动，若有来不及到达的点可能会有丢弃现象发生，使用门槛低，控制不太精细，但基本满足使用。<br> 参数arm_type：代表当前使用的机械臂型号，可以选择的参数有65（65系列）、651（eco65）、632（63系列）、75（75系列）。<br> 再实际使用时，我们选择对应的launch文件启动时会自动选择正确的型号，若有特殊要求可在此处进行相应的参数修改，修改之后需要在工作空间目录下进行重新编译，之后修改的配置才会生效。<br> 在工作空间目录运行colcon build指令。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop: ~/ros2_ws$ colcon build</span></span></code></pre></div><p>编译成功后可按如上指令进行功能包启动。</p><h2 id="rm-control功能包架构说明" tabindex="-1">rm_control功能包架构说明 <a class="header-anchor" href="#rm-control功能包架构说明" aria-label="Permalink to &quot;rm_control功能包架构说明&quot;">​</a></h2><h3 id="功能包文件总览" tabindex="-1">功能包文件总览 <a class="header-anchor" href="#功能包文件总览" aria-label="Permalink to &quot;功能包文件总览&quot;">​</a></h3><p>当前rm_driver功能包的文件构成如下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├── CMakeLists.txt                  #编译规则文件</span></span>
<span class="line"><span>├── include                         #依赖头文件文件夹</span></span>
<span class="line"><span>│   ├── cubicSpline.h               #三次样条插值头文件</span></span>
<span class="line"><span>│   └── rm_control.h                #rm_control头文件</span></span>
<span class="line"><span>├── launch</span></span>
<span class="line"><span>│   ├── rm_63_control.launch.py     #63启动文件</span></span>
<span class="line"><span>│   ├── rm_65_control.launch.py     #65启动文件</span></span>
<span class="line"><span>│   ├── rm_75_control.launch.py     #75启动文件</span></span>
<span class="line"><span>│   └── rm_eco65_control.launch.py  #eco65启动文件</span></span>
<span class="line"><span>├── package.xml                     #依赖声明文件</span></span>
<span class="line"><span>└── src</span></span>
<span class="line"><span>    └── rm_control.cpp              #代码源文件</span></span></code></pre></div><h2 id="rm-control话题说明" tabindex="-1">rm_control话题说明 <a class="header-anchor" href="#rm-control话题说明" aria-label="Permalink to &quot;rm_control话题说明&quot;">​</a></h2><p>如下为该功能包的话题说明：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  Subscribers:</span></span>
<span class="line"><span>    /parameter_events: rcl_interfaces/msg/ParameterEvent</span></span>
<span class="line"><span>  Publishers:</span></span>
<span class="line"><span>    /parameter_events: rcl_interfaces/msg/ParameterEvent</span></span>
<span class="line"><span>    /rm_driver/movej_canfd_cmd: rm_ros_interfaces/msg/Jointpos</span></span>
<span class="line"><span>    /rosout: rcl_interfaces/msg/Log</span></span>
<span class="line"><span>  Service Servers:</span></span>
<span class="line"><span>    /rm_control/describe_parameters: rcl_interfaces/srv/DescribeParameters</span></span>
<span class="line"><span>    /rm_control/get_parameter_types: rcl_interfaces/srv/GetParameterTypes</span></span>
<span class="line"><span>    /rm_control/get_parameters: rcl_interfaces/srv/GetParameters</span></span>
<span class="line"><span>    /rm_control/list_parameters: rcl_interfaces/srv/ListParameters</span></span>
<span class="line"><span>    /rm_control/set_parameters: rcl_interfaces/srv/SetParameters</span></span>
<span class="line"><span>    /rm_control/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically</span></span>
<span class="line"><span>  Service Clients:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  Action Servers:</span></span>
<span class="line"><span>    /rm_group_controller/follow_joint_trajectory: control_msgs/action/FollowJointTrajectory</span></span>
<span class="line"><span>  Action Clients:</span></span></code></pre></div><p>Publishers:代表其当前发布的话题，其最主要发布的话题为：</p><ul><li>rm_driver/movej_canfd_cmd，我们通过该话题将细分后的点发布给rm_driver节点，rm_driver节点再通过透传的指令方式给到机械臂执行相对应的路径。</li></ul><p>Action Servers:代表其接受和发布的动作信息：</p><ul><li>rm_group_controller/follow_joint_trajectory动作为rm_control与moveit2进行通信的桥梁，通过该动作rm_control接收到moveit2规划的路径，rm_control会将这些路径进行进一步细分由以上话题给到rm_driver。</li></ul><p>剩余话题和服务使用场景较少，这里不做详细介绍，大家可自行了解。</p>`,27),p=[o];function c(i,m,_,d,h,u){return n(),s("div",null,p)}const g=a(t,[["render",c]]);export{v as __pageData,g as default};

import{_ as e,c as a,o as r,a3 as s}from"./chunks/framework.DpFyhY0e.js";const t="/assets/rm_example11._Ly0eUj3.png",p="/assets/rm_example1.6XA9mEga.png",i="/assets/rm_example2.Bq-tQLEF.png",o="/assets/rm_example3.BBlUnfQb.png",m="/assets/rm_example4.VHHmeM_k.png",l="/assets/rm_example5.BqHD__Ca.png",n="/assets/rm_example6.56sWiy4n.png",d="/assets/rm_example7.CZ_0dPeA.png",c="/assets/rm_example8.BJPduajd.png",_="/assets/rm_example9.Cjok7wsQ.png",h="/assets/rm_example10.CxhNrhob.png",P=JSON.parse('{"title":"睿尔曼机器人rm_example使用说明","description":"","frontmatter":{},"headers":[],"relativePath":"robot/ros2/example.md","filePath":"robot/ros2/example.md","lastUpdated":1722230700000}'),v={name:"robot/ros2/example.md"},u=s('<h1 id="睿尔曼机器人rm-example使用说明" tabindex="-1">睿尔曼机器人rm_example使用说明 <a class="header-anchor" href="#睿尔曼机器人rm-example使用说明" aria-label="Permalink to &quot;睿尔曼机器人rm_example使用说明&quot;">​</a></h1><h2 id="rm-example功能包说明" tabindex="-1">rm_example功能包说明 <a class="header-anchor" href="#rm-example功能包说明" aria-label="Permalink to &quot;rm_example功能包说明&quot;">​</a></h2><p>rm_bringup功能包为实现了一些基本的机械臂功能，通过该功能包我们可以实现机械臂的一些基本的控制功能，还可以参考代码，实现其他的机械臂功能。</p><ul><li>1.功能包使用。</li><li>2.功能包架构说明。</li><li>3.功能包话题说明。<br> 通过这三部分内容的介绍可以帮助大家：</li><li>1.了解该功能包的使用。</li><li>2.熟悉功能包中的文件构成及作用。</li><li>3.熟悉功能包相关的话题，方便开发和使用。</li></ul><h2 id="rm-example功能包使用" tabindex="-1">rm_example功能包使用 <a class="header-anchor" href="#rm-example功能包使用" aria-label="Permalink to &quot;rm_example功能包使用&quot;">​</a></h2><h3 id="更换工作坐标系" tabindex="-1">更换工作坐标系 <a class="header-anchor" href="#更换工作坐标系" aria-label="Permalink to &quot;更换工作坐标系&quot;">​</a></h3><p>首先需要运行机械臂的底层驱动节点rm_driver。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 launch rm_driver rm_&lt;arm_type&gt;_driver.launch.py</span></span></code></pre></div><p>在实际使用时需要将以上的&lt;arm_type&gt;更换为实际的机械臂型号，可选择的机械臂型号有65、63、eco65、75。<br> 例如65机械臂的启动命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 launch rm_driver rm_65_driver.launch.py</span></span></code></pre></div><p>节点启动成功后，需要执行如下指令运行我们更换工作坐标系的节点。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 run rm_example rm_change_work_frame</span></span></code></pre></div><p>弹出以下指令代表更换成功。 <img src="'+t+'" alt="image"> 可以在终端中输入如下指令进行验证，首先订阅当前的工作坐标系话题。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 topic echo /rm_driver/get_curr_workFrame_result</span></span></code></pre></div><p>之后发布当前坐标系的请求。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 topic pub --once /rm_driver/get_curr_workFrame_cmd std_msgs/msg/Empty &quot;{}&quot;</span></span></code></pre></div><p>可以看到终端中弹出如下界面。 <img src="'+p+'" alt="image"></p><h3 id="得到当前的机械臂状态信息" tabindex="-1">得到当前的机械臂状态信息 <a class="header-anchor" href="#得到当前的机械臂状态信息" aria-label="Permalink to &quot;得到当前的机械臂状态信息&quot;">​</a></h3><p>首先需要运行机械臂的底层驱动节点rm_driver。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 launch rm_driver rm_&lt;arm_type&gt;_driver.launch.py</span></span></code></pre></div><p>在实际使用时需要将以上的&lt;arm_type&gt;更换为实际的机械臂型号，可选择的机械臂型号有65、63、eco65、75。<br> 例如65机械臂的启动命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 launch rm_driver rm_65_driver.launch.py</span></span></code></pre></div><p>节点启动成功后，需要执行如下指令运行获得机械臂当前状态的节点。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 run rm_example rm_get_state</span></span></code></pre></div><p>弹出以下指令代表更换成功。 <img src="'+i+'" alt="image"> 界面中现实的为机械臂当前的角度信息，以及机械臂当前的末端坐标位置和欧拉角姿态信息。</p><h3 id="机械臂movej运动" tabindex="-1">机械臂MoveJ运动 <a class="header-anchor" href="#机械臂movej运动" aria-label="Permalink to &quot;机械臂MoveJ运动&quot;">​</a></h3><p>通过如下指令可以控制机械臂进行MoveJ关节运动。 首先需要运行机械臂的底层驱动节点rm_driver。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 launch rm_driver rm_&lt;arm_type&gt;_driver.launch.py</span></span></code></pre></div><p>在实际使用时需要将以上的&lt;arm_type&gt;更换为实际的机械臂型号，可选择的机械臂型号有65、63、eco65、75。<br> 例如65机械臂的启动命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 launch rm_driver rm_65_driver.launch.py</span></span></code></pre></div><p>节点启动成功后，需要执行如下指令控制机械臂进行运动。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 launch rm_example rm_&lt;dof&gt;_movej.launch.py</span></span></code></pre></div><p>命令中的dof代表机械当前的自由度信息，可以选的参数有6dof和7dof。<br> 例如启动7轴的机械臂时需要使用如下指令。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 launch rm_example rm_7dof_movej.launch.py</span></span></code></pre></div><p>运行成功后，机械臂的关节将发生转动，且界面将显示如下信息。 <img src="'+o+'" alt="image"></p><h3 id="机械臂movej-p运动" tabindex="-1">机械臂MoveJ_P运动 <a class="header-anchor" href="#机械臂movej-p运动" aria-label="Permalink to &quot;机械臂MoveJ_P运动&quot;">​</a></h3><p>通过如下指令可以控制机械臂进行MoveJ_P关节运动。<br> 首先需要运行机械臂的底层驱动节点rm_driver。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 launch rm_driver rm_&lt;arm_type&gt;_driver.launch.py</span></span></code></pre></div><p>在实际使用时需要将以上的&lt;arm_type&gt;更换为实际的机械臂型号，可选择的机械臂型号有65、63、eco65、75。<br> 例如65机械臂的启动命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 launch rm_driver rm_65_driver.launch.py</span></span></code></pre></div><p>节点启动成功后，需要执行如下指令控制机械臂进行运动。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 run rm_example movejp_demo</span></span></code></pre></div><p>执行成功后界面将出现如下提示，并且机械臂运动到指定位姿。 <img src="'+m+'" alt="image"></p><h3 id="机械臂movel运动" tabindex="-1">机械臂MoveL运动 <a class="header-anchor" href="#机械臂movel运动" aria-label="Permalink to &quot;机械臂MoveL运动&quot;">​</a></h3><p>通过如下指令可以控制机械臂进行MoveL关节运动。 首先需要运行机械臂的底层驱动节点rm_driver。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 launch rm_driver rm_&lt;arm_type&gt;_driver.launch.py</span></span></code></pre></div><p>在实际使用时需要将以上的&lt;arm_type&gt;更换为实际的机械臂型号，可选择的机械臂型号有65、63、eco65、75。<br> 例如65机械臂的启动命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 launch rm_driver rm_65_driver.launch.py</span></span></code></pre></div><p>节点启动成功后，需要执行如下指令控制机械臂进行运动。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ ros2 run rm_example movel_demo</span></span></code></pre></div><p>执行成功后界面将出现如下提示，并且机械臂将进行两次运动，首先通过MoveJP运动到指定位姿，之后通过MoveL进行关节运动。 <img src="'+l+'" alt="image"></p><h2 id="rm-example功能包架构说明" tabindex="-1">rm_example功能包架构说明 <a class="header-anchor" href="#rm-example功能包架构说明" aria-label="Permalink to &quot;rm_example功能包架构说明&quot;">​</a></h2><h3 id="功能包文件总览" tabindex="-1">功能包文件总览 <a class="header-anchor" href="#功能包文件总览" aria-label="Permalink to &quot;功能包文件总览&quot;">​</a></h3><p>当前rm_driver功能包的文件构成如下。 ├── CMakeLists.txt #编译规则文件 ├── include │ └── rm_example ├── launch │ ├── rm_6dof_movej.launch.py #6自由度MoveJ运动启动文件 │ └── rm_7dof_movej.launch.py #7自由度MoveJ运动启动文件 ├── package.xml └── src ├── api_ChangeWorkFrame_demo.cpp #更换工作坐标系源文件 ├── api_Get_Arm_State_demo.cpp #获得机械臂状态源文件 ├── api_MoveJ_demo.cpp #MoveJ运动源文件 ├── api_MoveJP_demo.cpp #MoveJP运动源文件 └── api_MoveL_demo.cpp #MoveL运动源文件</p><h2 id="rm-example话题说明" tabindex="-1">rm_example话题说明 <a class="header-anchor" href="#rm-example话题说明" aria-label="Permalink to &quot;rm_example话题说明&quot;">​</a></h2><h3 id="rm-change-work-frame话题说明" tabindex="-1">rm_change_work_frame话题说明 <a class="header-anchor" href="#rm-change-work-frame话题说明" aria-label="Permalink to &quot;rm_change_work_frame话题说明&quot;">​</a></h3><p>以下为该节点的数据通信图： <img src="'+n+'" alt="image"> 可以看到/changeframe节点和/rm_driver之间的主要通信话题为/rm_driver/change_work_frame_result和/rm_driver/change_work_frame_cmd。/rm_driver/change_work_frame_cmd为切换请求和切换目标坐标的发布，/rm_driver/change_work_frame_result为切换结果。</p><h3 id="rm-get-state话题说明" tabindex="-1">rm_get_state话题说明 <a class="header-anchor" href="#rm-get-state话题说明" aria-label="Permalink to &quot;rm_get_state话题说明&quot;">​</a></h3><p>以下为该节点的数据通信图： <img src="'+d+'" alt="image"> 可以看到/get_state节点和/rm_driver之间的主要通信话题为/rm_driver/get_current_arm_state_cmd和/rm_driver/get_current_arm_original_state_result。/rm_driver/get_current_arm_state_cmd为获取机械臂当前状态请求，/rm_driver/get_current_arm_original_state_result为切换结果。</p><h3 id="movej-demo话题说明" tabindex="-1">movej_demo话题说明 <a class="header-anchor" href="#movej-demo话题说明" aria-label="Permalink to &quot;movej_demo话题说明&quot;">​</a></h3><p>以下为该节点的数据通信图： <img src="'+c+'" alt="image"> 可以看到/Movej_demo节点和/rm_driver之间的主要通信话题为/rm_driver/movej_cmd和/rm_driver/movej_result。/rm_driver/movej_cmd为控制机械臂运动的请求，将发布需要运动到的各关节的弧度信息，/rm_driver/ movej_result为运动结果。</p><h3 id="movejp-demo话题说明" tabindex="-1">movejp_demo话题说明 <a class="header-anchor" href="#movejp-demo话题说明" aria-label="Permalink to &quot;movejp_demo话题说明&quot;">​</a></h3><p>以下为该节点的数据通信图： <img src="'+_+'" alt="image"> 可以看到/Movejp_demo_node节点和/rm_driver之间的主要通信话题为/rm_driver/movej_p_cmd和/rm_driver/movej_p_result。/rm_driver/movej_p_cmd为控制机械臂运动规划的请求，将发布需要运动到的目标点的坐标，/rm_driver/ movej_p_result为运动结果。</p><h3 id="movel-demo话题说明" tabindex="-1">movel_demo话题说明 <a class="header-anchor" href="#movel-demo话题说明" aria-label="Permalink to &quot;movel_demo话题说明&quot;">​</a></h3><p>以下为该节点的数据通信图： <img src="'+h+'" alt="image"> 可以看到/Movel_demo_node节点和/rm_driver之间的主要通信话题为/rm_driver/movej_p_cmd和/rm_driver/movej_p_result还有/rm_driver/movel_cmd和/rm_driver/movel_result。/rm_driver/movej_p_cmd为控制机械臂运动规划的请求，将发布机械臂首先需要运动到的目标点的坐标， /rm_driver/ movej_p_result为运动结果，到达第一个点位后我们通过直线运动到达第二个点位，就可以通过/rm_driver/movel_cmd发布第二个点位的位姿，/rm_driver/movel_result话题代表运动的结果。</p>',65),g=[u];function b(k,x,y,C,f,q){return r(),a("div",null,g)}const M=e(v,[["render",b]]);export{P as __pageData,M as default};

import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.DpFyhY0e.js";const E=JSON.parse('{"title":"RMDemo_CoordinateSystem","description":"","frontmatter":{},"headers":[],"relativePath":"robot/demo/c/RMDemo_CoordinateSystem/readme.md","filePath":"robot/demo/c/RMDemo_CoordinateSystem/readme.md","lastUpdated":null}'),t={name:"robot/demo/c/RMDemo_CoordinateSystem/readme.md"},e=n(`<h1 id="rmdemo-coordinatesystem" tabindex="-1">RMDemo_CoordinateSystem <a class="header-anchor" href="#rmdemo-coordinatesystem" aria-label="Permalink to &quot;RMDemo_CoordinateSystem&quot;">​</a></h1><hr><h2 id="_1-项目介绍" tabindex="-1"><strong>1. 项目介绍</strong> <a class="header-anchor" href="#_1-项目介绍" aria-label="Permalink to &quot;**1. 项目介绍**&quot;">​</a></h2><p>本项目是一个使用C语言开发包，基于 Cmake 项目构建的项目，演示工作坐标系的新建、删除、修改、查询等功能</p><h2 id="_2-代码结构" tabindex="-1"><strong>2. 代码结构</strong> <a class="header-anchor" href="#_2-代码结构" aria-label="Permalink to &quot;**2. 代码结构**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RMDemo_CoordinateSystem/</span></span>
<span class="line"><span>├── build/                  # CMake构建生成的输出目录</span></span>
<span class="line"><span>├── cmake/                  # Windows下CMake构建生成的输出目录</span></span>
<span class="line"><span>├── include/                # 自定义头文件存放目录</span></span>
<span class="line"><span>├── Robotic_Arm/               睿尔曼机械臂二次开发包</span></span>
<span class="line"><span>│   ├── include/</span></span>
<span class="line"><span>│   │   ├── rm_define.h        # 机械臂二次开发包头文件，包含了定义的数据类型、结构体</span></span>
<span class="line"><span>│   │   └── rm_interface.h     # 机械臂二次开发包头文件，声明了机械臂所有操作接口</span></span>
<span class="line"><span>│   └── lib/</span></span>
<span class="line"><span>│       ├── api_c.dll          # Windows 64bit 的 API 库</span></span>
<span class="line"><span>│       ├── api_c.lib          # Windows 64bit 的 API 库</span></span>
<span class="line"><span>│       └── libapi_c.so        # Linux x86 的 API 库</span></span>
<span class="line"><span>├── src/                     # 源文件存放目录</span></span>
<span class="line"><span>│   └── main.c               # 主要功能的源文件</span></span>
<span class="line"><span>├── run.bat                  # Windows快速运行脚本</span></span>
<span class="line"><span>├── run.sh                   # linux快速运行脚本</span></span>
<span class="line"><span>├── CMakeLists.txt           # 项目的CMake配置文件</span></span>
<span class="line"><span>├── README.md                # 项目说明文档</span></span></code></pre></div><h2 id="_3-环境与依赖" tabindex="-1"><strong>3. 环境与依赖</strong> <a class="header-anchor" href="#_3-环境与依赖" aria-label="Permalink to &quot;**3. 环境与依赖**&quot;">​</a></h2><p>在Windows和Linux环境下运行时需要的环境和依赖项：</p><table tabindex="0"><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">Linux</th><th style="text-align:center;">Windows</th></tr></thead><tbody><tr><td style="text-align:center;">编译器</td><td style="text-align:center;">GCC 7.5或更高版本</td><td style="text-align:center;">MSVC2015或更高版本</td></tr><tr><td style="text-align:center;">CMake版本</td><td style="text-align:center;">3.10或更高版本</td><td style="text-align:center;">3.10或更高版本</td></tr><tr><td style="text-align:center;">特定依赖</td><td style="text-align:center;">RMAPI Linux版本库（位于<code>Robotic_Arm/lib</code>目录）</td><td style="text-align:center;">RMAPI Windows版本库（位于<code>Robotic_Arm/lib</code>目录）</td></tr></tbody></table><h2 id="_4-安装说明" tabindex="-1"><strong>4. 安装说明</strong> <a class="header-anchor" href="#_4-安装说明" aria-label="Permalink to &quot;**4. 安装说明**&quot;">​</a></h2><p>以Linux为例，项目的安装说明如下所示：</p><ol><li>配置环境：</li></ol><ul><li><p>Linux 安装cmake依赖：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build-essential</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span></span></code></pre></div><p>检查和安装依赖项：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gcc --version</span></span>
<span class="line"><span>cmake --version</span></span>
<span class="line"><span>Windows 安装cmake依赖</span></span></code></pre></div><p>CMake：确保已安装最新版本的 CMake。可以从 CMake官网 下载并安装。 编译器：安装 MinGW 或 Visual Studio (MSVC) 以进行构建。MinGW 是一个开源编译器套件，可以从 MinGW官网 下载。Visual Studio 包含 MSVC，可以从 Visual Studio官网 下载并安装。 依赖库： api_c.dll 和 api_c.lib：确保这些库文件存在于 Robotic_Arm/lib 目录中。 确保项目中的 include 目录和其他源文件路径正确设置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div></li></ul><ol start="2"><li><p>克隆项目到本地：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div></li></ol><h2 id="_5-注意事项" tabindex="-1"><strong>5. 注意事项</strong> <a class="header-anchor" href="#_5-注意事项" aria-label="Permalink to &quot;**5. 注意事项**&quot;">​</a></h2><p>该Demo以RM65-B型号机械臂为例，请根据实际情况修改代码中的数据。</p><h2 id="_6-使用指南" tabindex="-1"><strong>6. 使用指南</strong> <a class="header-anchor" href="#_6-使用指南" aria-label="Permalink to &quot;**6. 使用指南**&quot;">​</a></h2><h3 id="_6-1-快速运行" tabindex="-1"><strong>6.1. 快速运行</strong> <a class="header-anchor" href="#_6-1-快速运行" aria-label="Permalink to &quot;**6.1. 快速运行**&quot;">​</a></h3><p>按照以下步骤快速运行代码：</p><ol><li><p><strong>配置机械臂IP地址</strong>： 打开 <code>main.c</code> 文件，在 <code>main</code> 函数中修改 <code>robot_ip_address</code> 参数为当前机械臂的IP地址，默认IP地址为 <code>&quot;192.168.1.18&quot;</code>。</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">robot_ip_address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;192.168.1.18&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> robot_port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rm_robot_handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">robot_handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rm_create_robot_arm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(robot_ip_address, robot_port);</span></span></code></pre></div></li><li><p><strong>linux 命令行运行</strong>： 在终端进入 <code>RMDemo_CoordinateSystem</code> 目录，输入以下命令运行C程序：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./run.sh</span></span></code></pre></div></li><li><p><strong>Windows 运行</strong>： 双击run.bat脚本运行</p></li></ol><h3 id="_6-2-代码说明" tabindex="-1"><strong>6.2. 代码说明</strong> <a class="header-anchor" href="#_6-2-代码说明" aria-label="Permalink to &quot;**6.2. 代码说明**&quot;">​</a></h3><p>下面是 <code>main.c</code> 文件的主要功能：</p><ul><li><p><strong>连接机械臂</strong></p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rm_robot_handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">robot_handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rm_create_robot_arm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(robot_ip_address, robot_port);</span></span></code></pre></div><p>连接到指定IP和端口的机械臂。</p></li><li><p><strong>获取API版本</strong></p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api_version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rm_api_version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;API Version: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, api_version);</span></span></code></pre></div><p>获取并显示API版本。</p></li><li><p><strong>手动设置工作坐标系</strong></p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">workFrameName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;WorkTest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rm_pose_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initial_pose </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {.position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, .euler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm_set_manual_work_frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, workFrameName, initial_pose);</span></span></code></pre></div><p>手动设置名为 <code>&quot;WorkTest&quot;</code> 的工作坐标系，位姿为 <code>[0, 0, 0, 0, 0, 0]</code>。</p></li><li><p><strong>更新工作坐标系</strong></p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rm_pose_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> updated_pose </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {.position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, .euler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.142</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm_update_work_frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, workFrameName, updated_pose);</span></span></code></pre></div><p>更新名为 <code>&quot;WorkTest&quot;</code> 的工作坐标系，位姿为 <code>[0.3, 0, 0.3, 3.142, 0, 0]</code>。</p></li><li><p><strong>查询指定工作坐标系</strong></p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm_get_given_work_frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, workFrameName);</span></span></code></pre></div><p>查询名为 <code>&quot;WorkTest&quot;</code> 的工作坐标系并显示结果。</p></li></ul><h2 id="_7-许可证信息" tabindex="-1"><strong>7. 许可证信息</strong> <a class="header-anchor" href="#_7-许可证信息" aria-label="Permalink to &quot;**7. 许可证信息**&quot;">​</a></h2><ul><li>本项目遵循MIT许可证。</li></ul><h2 id="_8-常见问题解答-faq" tabindex="-1"><strong>8. 常见问题解答（FAQ）</strong> <a class="header-anchor" href="#_8-常见问题解答-faq" aria-label="Permalink to &quot;**8. 常见问题解答（FAQ）**&quot;">​</a></h2><ul><li><p><strong>Q:</strong> 如何解决编译错误？ <strong>A:</strong> 请确保您的编译器版本和依赖库满足系统要求，并按照安装说明重新配置环境。</p></li><li><p><strong>Q:</strong> 如何连接机器人？ <strong>A:</strong> 请参考示例代码中的连接步骤，确保机器人IP地址和端口正确配置。</p></li></ul>`,27),l=[e];function p(h,k,r,o,d,c){return a(),i("div",null,l)}const y=s(t,[["render",p]]);export{E as __pageData,y as default};

import{_ as a,c as n,o as s,a3 as o}from"./chunks/framework.DpFyhY0e.js";const u=JSON.parse('{"title":"rm_control功能包说明","description":"","frontmatter":{},"headers":[],"relativePath":"robot/ros/control.md","filePath":"robot/ros/control.md","lastUpdated":null}'),r={name:"robot/ros/control.md"},t=o(`<h1 id="rm-control功能包说明" tabindex="-1">rm_control功能包说明 <a class="header-anchor" href="#rm-control功能包说明" aria-label="Permalink to &quot;rm\\_control功能包说明&quot;">​</a></h1><p>rm_control功能包为实现moveit控制真实机械臂时所必须的一个功能包，该功能包的主要作用为将moveit规划好的路径点进行进一步的细分，将细分后的路径点以透传的方式给到rm_driver，实现机械臂的规划运行。</p><ol><li>功能包使用。</li><li>功能包架构说明。</li><li>功能包话题说明。</li></ol><p>通过这三部分内容的介绍可以帮助大家：</p><ol><li>了解该功能包的使用。</li><li>熟悉功能包中的文件构成及作用。</li><li>熟悉功能包相关的话题，方便开发和使用</li></ol><p>代码链接：<a href="https://github.com/RealManRobot/rm_robot/tree/main/rm_control%E3%80%82" target="_blank" rel="noreferrer">https://github.com/RealManRobot/rm_robot/tree/main/rm_control。</a></p><h2 id="_1-rm-control功能包使用" tabindex="-1">1.rm_control功能包使用 <a class="header-anchor" href="#_1-rm-control功能包使用" aria-label="Permalink to &quot;1.rm\\_control功能包使用&quot;">​</a></h2><h3 id="_1-1功能包基础使用" tabindex="-1">1.1功能包基础使用 <a class="header-anchor" href="#_1-1功能包基础使用" aria-label="Permalink to &quot;1.1功能包基础使用&quot;">​</a></h3><p>首先配置好环境完成连接后我们可以通过以下命令直接启动节点，运行rm_control功能包。</p><div class="language-ros vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ros</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ roslaunch rm_control rm_&lt;arm_type&gt;_control.launch</span></span></code></pre></div><p>在实际使用时需要将以上的&lt;arm_type&gt;更换为实际的机械臂型号，可选择的机械臂型号有65、63、eco65、75。</p><p>例如65机械臂的启动命令：</p><div class="language-ros vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ros</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm@rm-desktop:~$ roslaunch rm_control rm_65_control.launch</span></span></code></pre></div><p>节点启动成功后，将显示以下画面。</p><p><img src="https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MAeqxYr88RVxO8j9/img/7a7b1903-6c1b-4d76-8336-9d80fe300dde.png" alt="image.png"></p><p>在单独启动该功能包的节点时并不发挥作用，需要结合rm_driver功能包和moveit的相关节点一起使用才能发挥作用，详细请查看<a href="./../ros/rm_moveit_config_ROS.html">rm_moveit_config</a>相关内容。</p><h3 id="_1-2功能包进阶使用" tabindex="-1">1.2功能包进阶使用 <a class="header-anchor" href="#_1-2功能包进阶使用" aria-label="Permalink to &quot;1.2功能包进阶使用&quot;">​</a></h3><p>在rm_control功能包中也有一些参数可以进行配置，可以直接在launch文件中进行了解查看。</p><p><img src="https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/MAeqxYr88RVxO8j9/img/b9769251-2ad7-4088-b306-2b88aa42b99d.png" alt="image.png"></p><p>当前该文件只有一个配置参数。</p><p>Arm_Dof：代表机械臂的自由度，当为RM65、RML63、ECO65时应配置为6，当为RM75时应配置为7。</p><h2 id="_2-rm-control功能包架构说明" tabindex="-1">2.rm_control功能包架构说明 <a class="header-anchor" href="#_2-rm-control功能包架构说明" aria-label="Permalink to &quot;2.rm\\_control功能包架构说明&quot;">​</a></h2><h3 id="_2-1功能包文件总览" tabindex="-1">2.1功能包文件总览 <a class="header-anchor" href="#_2-1功能包文件总览" aria-label="Permalink to &quot;2.1功能包文件总览&quot;">​</a></h3><p>当前rm_driver功能包的文件构成如下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    ├── CMakeLists.txt                #编译规则文件</span></span>
<span class="line"><span>    ├── launch</span></span>
<span class="line"><span>    │   ├── rm_63_control.launch        #63启动文件</span></span>
<span class="line"><span>    │   ├── rm_65_control.launch        #65启动文件</span></span>
<span class="line"><span>    │   ├── rm_75_control.launch        #75启动文件</span></span>
<span class="line"><span>    │   └── rm_eco65_control.launch     #eco65启动文件</span></span>
<span class="line"><span>    ├── package.xml                  #依赖声明文件</span></span>
<span class="line"><span>    └── src</span></span>
<span class="line"><span>        ├── cubicSpline.h               #三次样条插值头文件</span></span>
<span class="line"><span>        └── rm_control.cpp              #代码源文件</span></span>
<span class="line"><span>    4. rm_control话题说明</span></span>
<span class="line"><span>    如下为该功能包的话题说明。</span></span>
<span class="line"><span>    /joint_states</span></span>
<span class="line"><span>    /rm_driver/ArmError</span></span>
<span class="line"><span>    /rm_driver/Clear_System_Err</span></span>
<span class="line"><span>    /rm_driver/JointPos</span></span>
<span class="line"><span>    /rm_group/follow_joint_trajectory/cancel</span></span>
<span class="line"><span>    /rm_group/follow_joint_trajectory/feedback</span></span>
<span class="line"><span>    /rm_group/follow_joint_trajectory/goal</span></span>
<span class="line"><span>    /rm_group/follow_joint_trajectory/result</span></span>
<span class="line"><span>    /rm_group/follow_joint_trajectory/status</span></span>
<span class="line"><span>    /rosout</span></span>
<span class="line"><span>    /rosout_agg</span></span></code></pre></div><p>我们主要关注以下几个话题:</p><p><code>Publishers</code>:代表其当前发布的话题，其最主要发布的话题为/rm_driver/JointPos，我们通过该话题将细分后的点发布给rm_driver节点，rm_driver节点再通过透传的指令方式给到机械臂执行相对应的路径。</p><p><code>Action Servers</code>:代表其接受和发布的动作信息，rm_group/follow_joint_trajectory动作为rm_control与moveit进行通信的桥梁，通过该动作rm_control接收到moveit规划的路径，rm_control会将这些路径进行进一步细分由以上话题给到rm_driver。</p>`,28),e=[t];function l(p,c,i,_,m,d){return s(),n("div",null,e)}const g=a(r,[["render",l]]);export{u as __pageData,g as default};

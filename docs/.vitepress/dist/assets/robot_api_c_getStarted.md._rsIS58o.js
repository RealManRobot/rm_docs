import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.DpFyhY0e.js";const l="/assets/getStart1.BoBshbk2.png",t="/assets/getStart2.05A4x0yt.png",e="/assets/getStart3.BC1bpEas.png",h="/assets/getStart4.DFyP2Sx0.png",p="/assets/getStart5.vEtDM80B.png",r="/assets/getStart6.BeoyNZSm.png",m=JSON.parse('{"title":"睿尔曼机械臂C/C++ API 开发文档","description":"","frontmatter":{},"headers":[],"relativePath":"robot/api/c/getStarted.md","filePath":"robot/api/c/getStarted.md","lastUpdated":1722215277000}'),o={name:"robot/api/c/getStarted.md"},k=n(`<h1 id="睿尔曼机械臂c-c-api-开发文档" tabindex="-1">睿尔曼机械臂C/C++ API 开发文档 <a class="header-anchor" href="#睿尔曼机械臂c-c-api-开发文档" aria-label="Permalink to &quot;睿尔曼机械臂C/C++ API 开发文档&quot;">​</a></h1><h2 id="_1-引言" tabindex="-1">1.引言 <a class="header-anchor" href="#_1-引言" aria-label="Permalink to &quot;1.引言&quot;">​</a></h2><p>本开发包旨在为睿尔曼机械臂的二次开发提供便捷的接口。通过本开发包，用户能够实现对机械臂的控制、路径规划、状态监控等一系列功能，从而加速机械臂相关应用的开发过程。</p><h2 id="_2-目标受众" tabindex="-1">2.目标受众 <a class="header-anchor" href="#_2-目标受众" aria-label="Permalink to &quot;2.目标受众&quot;">​</a></h2><ul><li><strong>机械臂开发者</strong>：对于希望利用C/C++语言进行睿尔曼机械臂编程和调试的机器人开发者来说，本开发包提供了丰富的API和示例代码，方便快速上手。</li><li><strong>自动化系统集成商</strong>：在自动化系统中集成睿尔曼机械臂功能时，本开发包能够简化集成过程，提高开发效率。</li><li><strong>科研人员</strong>：科研人员可以利用本开发包进行睿尔曼机械臂相关算法的研究和实验，如路径规划、力控制等。</li><li><strong>教育用户</strong>：对于机器人教育领域的用户，本开发包可用于睿尔曼机械臂的教学和实验，帮助学生更好地理解和应用机械臂技术。</li></ul><h2 id="_3-开发包使用说明" tabindex="-1">3.开发包使用说明 <a class="header-anchor" href="#_3-开发包使用说明" aria-label="Permalink to &quot;3.开发包使用说明&quot;">​</a></h2><h3 id="_3-1-windows环境使用说明" tabindex="-1">3.1 Windows环境使用说明 <a class="header-anchor" href="#_3-1-windows环境使用说明" aria-label="Permalink to &quot;3.1 Windows环境使用说明&quot;">​</a></h3><h4 id="_3-1-1-支持的编译器" tabindex="-1">3.1.1 支持的编译器 <a class="header-anchor" href="#_3-1-1-支持的编译器" aria-label="Permalink to &quot;3.1.1 支持的编译器&quot;">​</a></h4><ul><li><strong>MSVC2015 或更高版本</strong>：Microsoft Visual C++ 2015（MSVC2015）或更新的版本是推荐的编译器，它与Windows系统兼容性良好，且支持最新的C语言标准。使用MSVC可以方便地编译和调试C语言编写的睿尔曼机械臂控制程序。</li></ul><h4 id="_3-1-2-开发包说明" tabindex="-1">3.1.2 开发包说明 <a class="header-anchor" href="#_3-1-2-开发包说明" aria-label="Permalink to &quot;3.1.2 开发包说明&quot;">​</a></h4><ul><li><p><strong>头文件</strong>：C语言开发包含以下头文件：</p><ul><li><code>rm_define.h</code>：机械臂自定义头文件，包含了定义的数据类型、结构体。</li><li><code>rm_interface.h</code>：机械臂自定义头文件，声明了C语言机械臂操作接口。</li></ul><p>如果是C++开发，则额外包含以下头文件：</p><ul><li><code>rm_service.h</code>：机械臂自定义头文件，声明了C++语言机械臂操作接口。</li><li><code>rm_service_global.h</code>：机械臂自定义头文件，定义编译Windows C++版本库时导出宏。</li></ul></li><li><p><strong>动态链接库（DLLs）</strong>：包含了控制机械臂所需的函数和接口。用户需要在项目中正确配置这些DLLs的路径及版本，以便编译器能够找到并链接它们。包含以下版本：</p><ul><li><code>32bit</code>：对应Windows 32位编译器（例如MSVC2017 32bit）使用的库，分为<code>release/debug</code>版本</li><li><code>64bit</code>：对应Windows 64位编译器（例如MSVC2017 64bit）使用的库，分为<code>release/debug</code>版本</li></ul></li></ul><h3 id="_3-2-linux-环境使用说明" tabindex="-1">3.2 Linux 环境使用说明 <a class="header-anchor" href="#_3-2-linux-环境使用说明" aria-label="Permalink to &quot;3.2 Linux 环境使用说明&quot;">​</a></h3><h4 id="_3-2-1-支持的架构" tabindex="-1">3.2.1 支持的架构 <a class="header-anchor" href="#_3-2-1-支持的架构" aria-label="Permalink to &quot;3.2.1 支持的架构&quot;">​</a></h4><ul><li><strong>x86</strong>：标准的Intel和AMD处理器架构。</li><li><strong>ARM</strong>：支持基于ARM架构的处理器。</li></ul><h4 id="_3-2-2-编译器" tabindex="-1">3.2.2 编译器 <a class="header-anchor" href="#_3-2-2-编译器" aria-label="Permalink to &quot;3.2.2 编译器&quot;">​</a></h4><ul><li><strong>GCC</strong>：GNU Compiler Collection（GCC）是Linux下广泛使用的开源编译器集合。编译器要求GCC 7.5以上版本，以确保最佳的性能和兼容性。</li></ul><h4 id="_3-2-3-开发包说明" tabindex="-1">3.2.3 开发包说明 <a class="header-anchor" href="#_3-2-3-开发包说明" aria-label="Permalink to &quot;3.2.3 开发包说明&quot;">​</a></h4><ul><li><strong>头文件</strong>：与Windows 头文件相同，详见Windows环境的开发包说明</li><li><strong>共享库（.so 文件）</strong>：包含了控制机械臂所需的函数和接口。用户需要确保这些库文件在编译和运行时都能被系统找到。包含以下版本的库： <ul><li><code>linux_x86</code>：包含<code>release/debug</code>版本</li><li><code>linux_arm</code>：包含<code>release/debug</code>版本</li></ul></li></ul><h2 id="_4-使用示例-msvc" tabindex="-1">4.使用示例-MSVC <a class="header-anchor" href="#_4-使用示例-msvc" aria-label="Permalink to &quot;4.使用示例-MSVC&quot;">​</a></h2><blockquote><p>支持MSVC2015及以上版本</p></blockquote><p>本项目是一个使用Microsoft Visual Studio开发的C/C++项目，旨在演示如何将睿尔曼C语言版本的二次开发包集成到Visual Studio项目中。本Readme文档将指导用户如何配置环境、导入库文件、设置项目属性以及编译和运行项目。</p><h3 id="_4-1代码结构" tabindex="-1">4.1代码结构 <a class="header-anchor" href="#_4-1代码结构" aria-label="Permalink to &quot;4.1代码结构&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RMDemo_VisualStudio_Project</span></span>
<span class="line"><span>├── RMDemo_VisualStudio_Project.sln # 解决方案文件</span></span>
<span class="line"><span>├── include</span></span>
<span class="line"><span>│   ├── rm_define.h  # 机械臂二次开发包头文件，包含了定义的数据类型、结构体</span></span>
<span class="line"><span>│   └── rm_interface.h # 机械臂二次开发包头文件，声明了机械臂所有操作接口</span></span>
<span class="line"><span>├── lib</span></span>
<span class="line"><span>│   ├── api_c.dll    # Windows 的 API 库（默认release 64bit）</span></span>
<span class="line"><span>│   └── api_c.lib    # Windows 的 API 库（默认release 64bit）</span></span>
<span class="line"><span>├── RMDemo_VisualStudio_Project #源代码文件夹</span></span>
<span class="line"><span>└── readme.md            # 项目说明文档</span></span></code></pre></div><h3 id="_4-2环境准备" tabindex="-1">4.2环境准备 <a class="header-anchor" href="#_4-2环境准备" aria-label="Permalink to &quot;4.2环境准备&quot;">​</a></h3><ul><li><strong>Visual Studio</strong>： <ul><li>安装适合C/C++开发的Visual Studio版本（如Visual Studio Community），推荐最新版本。</li><li>在安装时，选择安装使用C++的桌面开发。</li><li>MSVC编译器要求2015以上</li></ul></li><li><strong>睿尔曼二次开发包</strong>： 下载链接</li></ul><h3 id="_4-3项目步骤" tabindex="-1">4.3项目步骤 <a class="header-anchor" href="#_4-3项目步骤" aria-label="Permalink to &quot;4.3项目步骤&quot;">​</a></h3><h4 id="_4-3-1项目配置" tabindex="-1">4.3.1项目配置 <a class="header-anchor" href="#_4-3-1项目配置" aria-label="Permalink to &quot;4.3.1项目配置&quot;">​</a></h4><ol><li><p><strong>创建新的C/C++项目</strong>：</p><ul><li>打开Visual Studio，选择“创建新项目”。</li><li>在“创建新项目”对话框中，选择“控制台应用”或适合你需求的C/C++项目类型，然后点击“下一步”。</li><li>填写项目名称、位置等信息，然后点击“创建”。</li></ul></li><li><p><strong>包含睿尔曼二次开发包头文件</strong>：</p><ul><li><p>将睿尔曼开发包头文件及动态库文件复制到项目目录中。</p><p><img src="`+l+'" alt="image-20240723165905501"></p></li><li><p>右键点击项目名称，打开“属性页”对话框。</p></li><li><p>在左窗格中，选择“配置属性”&gt;“C/C++”&gt;“常规”。</p></li><li><p>在“附加包含目录”下拉框点击编辑，在编辑控件中添加睿尔曼头文件的路径。可选择省略号 (...) 控件浏览到正确的文件夹，也可输入相对路径。</p></li></ul><p><img src="'+t+'" alt="image-20240723171553107"></p></li><li><p><strong>将DLL 导入库添加到项目中</strong>：</p><ul><li>在项目属性页中，导航到“链接器” &gt; “输入”。</li><li>在“附加依赖项”中添加睿尔曼库的名称<code>api_c.lib</code>。</li><li>选择“配置属性”&gt;“链接器”&gt;“常规”。选择“附加库目录”旁的下拉控件，然后选择“编辑”。</li><li>在编辑控件中，指定指向 <code>api_c.lib</code> 文件位置的路径。</li></ul><p><img src="'+e+'" alt="image-20240723171455243"></p></li><li><p><strong>在生成后事件中复制 DLL</strong>：</p><p>将 DLL 复制到包含客户端可执行文件的目录中，作为生成过程的一部分。</p><ul><li>在项目属性页中，选择“配置属性”&gt;“生成事件”&gt;“生成后事件”。</li><li>在”命令行“字段中选择编辑打开编辑控件，输入以下命令：</li></ul><p><code>xcopy /y /d &quot;..\\lib\\api_c.dll&quot; &quot;$(OutDir)&quot;</code></p><p><img src="'+h+`" alt="image-20240723171727749"></p></li><li><p><strong>保存并关闭项目属性页</strong>。</p></li></ol><h4 id="_4-3-2示例代码" tabindex="-1">4.3.2示例代码 <a class="header-anchor" href="#_4-3-2示例代码" aria-label="Permalink to &quot;4.3.2示例代码&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;rm_interface.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;time.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;string.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rm_set_log_call_back</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rm_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RM_TRIPLE_MODE_E);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rm_api_version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;current api version: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rm_create_robot_arm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;192.168.1.18&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( handle-&gt;id  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        rm_delete_robot_arm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;arm connect err...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;arm id </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, handle-&gt;id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    rm_arm_software_version_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arm_software_version;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rm_get_arm_software_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arm_software_version);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">================== Arm Software Information ==================</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;get arm software info result : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ret);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Algorithm Library Version: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arm_software_version.algorithm_info.version);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Control Layer Software Version: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arm_software_version.ctrl_info.version);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dynamics Version: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arm_software_version.dynamic_info.model_version);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Planning Layer Software Version: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arm_software_version.plan_info.version);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Arm Model: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arm_software_version.product_version);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>输出结果如下所示：</p><p><img src="`+p+`" alt="输出结果图片"></p><h4 id="_4-3-3编译与运行" tabindex="-1">4.3.3编译与运行 <a class="header-anchor" href="#_4-3-3编译与运行" aria-label="Permalink to &quot;4.3.3编译与运行&quot;">​</a></h4><ul><li>在Visual Studio中，选择“生成”菜单下的“生成解决方案”来编译项目。</li><li>确保没有编译错误，并且项目能够正确链接到睿尔曼库。</li><li>选择“调试”菜单下的“开始调试”或点击工具栏上的绿色播放按钮来运行你的应用程序。</li></ul><h3 id="_4-4-注意事项" tabindex="-1">4.4 注意事项 <a class="header-anchor" href="#_4-4-注意事项" aria-label="Permalink to &quot;4.4 注意事项&quot;">​</a></h3><p>该Demo以RM65-B型号机械臂为例，请根据实际情况修改代码中的数据。</p><h3 id="_4-5-许可证信息" tabindex="-1">4.5 许可证信息 <a class="header-anchor" href="#_4-5-许可证信息" aria-label="Permalink to &quot;4.5 许可证信息&quot;">​</a></h3><ul><li>本项目遵循MIT许可证。</li></ul><h3 id="_4-6-常见问题解答-faq" tabindex="-1">4.6 常见问题解答（FAQ） <a class="header-anchor" href="#_4-6-常见问题解答-faq" aria-label="Permalink to &quot;4.6 常见问题解答（FAQ）&quot;">​</a></h3><ul><li><strong>链接错误</strong>：检查是否已正确包含头文件及导入库。</li><li><strong>运行时错误</strong>：确保dll文件在应用程序的搜索路径中。</li><li><strong>机械臂连接不上</strong>：检查机械臂IP是否被修改。</li><li><strong>机械臂运动失败</strong>：检查机械臂型号，本示例基于RM65_B机械臂编写，其中的运动点位可能不适用于其他型号。</li></ul><h2 id="_5-使用示例-qt" tabindex="-1">5.使用示例-Qt <a class="header-anchor" href="#_5-使用示例-qt" aria-label="Permalink to &quot;5.使用示例-Qt&quot;">​</a></h2><p>本项目是一个跨平台的Qt应用程序，支持Linux和Windows操作系统。项目旨在演示如何使用Qt的qmake构建系统来导入并使用睿尔曼C语言版本二次开发包完成机械臂的连接、获取机械臂版本、机械臂运动以及断开连接。本Readme文档将说明使用环境要求、并指导用户如何新建項目--&gt;导入库--&gt;调用接口--&gt;构建和运行项目。</p><h3 id="_5-2代码结构" tabindex="-1">5.2代码结构 <a class="header-anchor" href="#_5-2代码结构" aria-label="Permalink to &quot;5.2代码结构&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RMDemo_QtExample_C</span></span>
<span class="line"><span>├── API_QtExample_C.pro # 项目文件，包含了项目的配置信息</span></span>
<span class="line"><span>├── include</span></span>
<span class="line"><span>│   ├── rm_define.h  # 机械臂二次开发包头文件，包含了定义的数据类型、结构体</span></span>
<span class="line"><span>│   └── rm_interface.h # 机械臂二次开发包头文件，声明了机械臂所有操作接口</span></span>
<span class="line"><span>├── lib</span></span>
<span class="line"><span>│   ├── api_c.dll    # Windows 的 API 库</span></span>
<span class="line"><span>│   ├── api_c.lib    # Windows 的 API 库</span></span>
<span class="line"><span>│   └── libapi_c.so  # Linux 的 API 库</span></span>
<span class="line"><span>├── main.c           # 主函数</span></span>
<span class="line"><span>└── readme.md            # 示例工程说明文档</span></span></code></pre></div><h3 id="_5-3环境要求" tabindex="-1">5.3环境要求 <a class="header-anchor" href="#_5-3环境要求" aria-label="Permalink to &quot;5.3环境要求&quot;">​</a></h3><ul><li><strong>Qt 版本</strong>：下载并安装适合你操作系统的Qt版本（Qt 5 或 Qt 6）。</li><li><strong>操作系统</strong>：支持Linux、Windows</li><li><strong>编译器</strong>： <ul><li>Windows环境下，编译器要求MSVC 2015以上</li><li>Linux环境下，使用GCC 7.5或更高版本</li></ul></li><li><strong>其他依赖</strong>：睿尔曼二次开发包（下载链接）</li></ul><h3 id="_5-4项目步骤" tabindex="-1">5.4项目步骤 <a class="header-anchor" href="#_5-4项目步骤" aria-label="Permalink to &quot;5.4项目步骤&quot;">​</a></h3><h4 id="_5-4-1项目配置" tabindex="-1">5.4.1项目配置 <a class="header-anchor" href="#_5-4-1项目配置" aria-label="Permalink to &quot;5.4.1项目配置&quot;">​</a></h4><ol><li><p><strong>创建Qt项目</strong>：</p><ul><li>打开Qt Creator，选择“文件” &gt; “新建文件或项目”。</li><li>选择“应用程序”下的模板（例如“Qt Console Application”），点击“选择”按钮继续。</li><li>填写项目名称、位置等信息，选择qmake构建系统，点击“下一步”。</li><li>构建套件选择MSVC编译器（例如Windows下选择MSVC2017 64bit），点击“下一步”直到完成向导。</li></ul></li><li><p><strong>配置qmake</strong>：</p><ul><li><p>根据选择的编译器将对应版本的睿尔曼二次开发包动态库文件及头文件放置到项目中（对应上面选择的MSVC2017 64bit编译器，这里选择Windows 64bit的库）。</p></li><li><p>打开项目的<code>.pro</code>文件，添加睿尔曼库的包含路径和库文件。</p></li></ul><p>本项目二次开发包文件目录及<code>.pro</code>文件配置如下（用户根据实际路径调整）：</p><p><img src="`+r+`" alt="image-20240723131347642"></p><div class="language-pro vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">pro</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INCLUDEPATH += $$PWD/include</span></span>
<span class="line"><span>LIBS += -L$$PWD/lib -lapi_c</span></span></code></pre></div><ul><li>注意替换<code>$$PWD/include</code>和<code>$$PWD/lib</code>为实际的头文件和库文件路径。</li><li><code>-lapi_c</code>中的<code>api_c</code>是库文件（不包括前缀和后缀）的名称。</li></ul></li><li><p><strong>修改项目代码</strong>：</p><ul><li>在你的Qt项目中，添加包含睿尔曼头文件的代码。</li><li>编写调用睿尔曼库函数的代码，以实现所需的功能。</li></ul></li></ol><h4 id="_5-4-2编译与运行" tabindex="-1">5.4.2编译与运行 <a class="header-anchor" href="#_5-4-2编译与运行" aria-label="Permalink to &quot;5.4.2编译与运行&quot;">​</a></h4><ol><li>编译项目： <ul><li>在Qt Creator中，点击左下角的绿色播放按钮或使用快捷键（通常是F5）来构建并运行项目。</li><li>确保没有编译错误，并且项目能够正确链接到睿尔曼库。</li></ul></li><li>运行与测试： <ul><li>运行应用程序，并测试其是否按预期工作，特别是那些使用睿尔曼库函数的部分。</li></ul></li></ol><h3 id="_5-5注意事项" tabindex="-1">5.5注意事项 <a class="header-anchor" href="#_5-5注意事项" aria-label="Permalink to &quot;5.5注意事项&quot;">​</a></h3><p>该Demo以RM65-B型号机械臂为例，请根据实际情况修改代码中的数据。</p><h3 id="_5-6许可证信息" tabindex="-1">5.6许可证信息 <a class="header-anchor" href="#_5-6许可证信息" aria-label="Permalink to &quot;5.6许可证信息&quot;">​</a></h3><ul><li>本项目遵循MIT许可证。</li></ul><h3 id="_5-7常见问题解答-faq" tabindex="-1">5.7常见问题解答（FAQ） <a class="header-anchor" href="#_5-7常见问题解答-faq" aria-label="Permalink to &quot;5.7常见问题解答（FAQ）&quot;">​</a></h3><ul><li><strong>链接错误</strong>： <ul><li>检查LIBS和INCLUDEPATH是否正确指向睿尔曼库的头文件和库文件。</li><li>检查指向的库文件版本是否与环境相对应。</li></ul></li><li><strong>编译器或构建错误</strong>：检查Qt Creator的配置设置，确保选择了正确的Qt版本和编译器。</li><li><strong>运行时错误</strong>：确保库文件在系统的库路径中，或在应用程序的可执行文件同目录下。</li><li><strong>机械臂连接不上</strong>：检查机械臂IP是否被修改。</li><li><strong>机械臂运动失败</strong>：检查机械臂型号，本示例基于RM65_B机械臂编写，其中的运动点位可能不适用于其他型号。</li></ul><h2 id="_6-支持渠道" tabindex="-1">6.支持渠道 <a class="header-anchor" href="#_6-支持渠道" aria-label="Permalink to &quot;6.支持渠道&quot;">​</a></h2><ul><li><strong>示例与文档</strong>：跳转对应API链接。</li><li><strong>SDK与库</strong>：下载链接。</li><li><strong>社区支持</strong>：跳转链接。</li></ul>`,59),d=[k];function g(c,E,u,F,_,y){return a(),i("div",null,d)}const b=s(o,[["render",g]]);export{m as __pageData,b as default};
